<section class="py-20 gradient-bg particles-bg">
  <div class="container mx-auto px-4">
    <div class="text-center mb-16 fade-in">
      <h2 class="text-4xl md:text-6xl font-bold mb-4 text-white" data-bild-block-index="{{blockIndex}}" data-bild-prop="title">
        {{title}}
      </h2>
      <p class="text-xl text-white/80 max-w-3xl mx-auto" data-bild-block-index="{{blockIndex}}" data-bild-prop="subtitle">
        {{subtitle}}
      </p>
    </div>

    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8">
      {{#each stats}}
      <div class="text-center group bounce-in" style="animation-delay: {{@index}}00ms;">
        <div class="glass-effect rounded-3xl p-8 backdrop-blur-lg border border-white/20 hover:border-white/40 transition-all duration-300 hover:scale-105">
          <!-- Icon -->
          {{#if icon}}
          <div class="w-20 h-20 mx-auto mb-6 rounded-full bg-white/10 flex items-center justify-center group-hover:bg-white/20 transition-colors duration-300">
            <svg class="w-10 h-10 text-white" fill="currentColor" viewBox="0 0 24 24">
              <path d="{{icon}}"/>
            </svg>
          </div>
          {{/if}}

          <!-- Animated Number -->
          <div class="mb-4">
            <span class="text-5xl md:text-6xl font-bold text-white counter" data-target="{{number}}" data-suffix="{{suffix}}">
              0{{suffix}}
            </span>
          </div>

          <!-- Label -->
          <h3 class="text-xl font-semibold text-white mb-2">
            {{label}}
          </h3>
          
          <!-- Description -->
          {{#if description}}
          <p class="text-white/70 text-sm">
            {{description}}
          </p>
          {{/if}}
        </div>
      </div>
      {{/each}}
    </div>
  </div>

  <!-- Counter Animation Script -->
  <script>
    document.addEventListener('DOMContentLoaded', function() {
      const counters = document.querySelectorAll('.counter');
      
      const animateCounter = (counter) => {
        const target = parseInt(counter.getAttribute('data-target'));
        const suffix = counter.getAttribute('data-suffix') || '';
        const duration = 2000; // 2 seconds
        const step = target / (duration / 16); // 60fps
        let current = 0;
        
        const timer = setInterval(() => {
          current += step;
          if (current >= target) {
            current = target;
            clearInterval(timer);
          }
          counter.textContent = Math.floor(current) + suffix;
        }, 16);
      };

      // Intersection Observer for triggering animation when in view
      const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
          if (entry.isIntersecting) {
            animateCounter(entry.target);
            observer.unobserve(entry.target);
          }
        });
      }, { threshold: 0.5 });

      counters.forEach(counter => {
        observer.observe(counter);
      });
    });
  </script>
</section>